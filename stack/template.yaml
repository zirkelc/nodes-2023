AWSTemplateFormatVersion: '2010-09-09'
Description: Neo4j Enterprise Edition
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Neo4j Configuration"
        Parameters:
          - GraphDatabaseVersion
          - InstallGraphDataScience
          - GraphDataScienceLicenseKey
          - InstallBloom
          - BloomLicenseKey
          - Password
      - Label:
          default: "Infrastructure Configuration"
        Parameters:
          - InstanceType
          - SSHKeyName
          - DiskSize
          - ImageId

    ParameterLabels:
      GraphDatabaseVersion:
        default: Graph Database Version
      InstallGraphDataScience:
        default: Install Graph Data Science
      GraphDataScienceLicenseKey:
        default: Graph Data Science License Key
      InstallBloom:
        default: Install Bloom
      BloomLicenseKey:
        default: Bloom License Key
      Password:
        default: Password
      SSHKeyName:
        default: SSH Key Pair
      InstanceType:
        default: Instance Type
      DiskSize:
        default: Disk Size
      ImageId:
        default: AMI ID

# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
Parameters:
  GraphDatabaseVersion:
    Description: Neo4j Graph Database Version
    Type: String
    Default: '4.4.11'

  InstallGraphDataScience:
    Description: Install Graph Data Science
    Type: String
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'

  GraphDataScienceLicenseKey:
    Description: License Key for Graph Data Science
    Type: String
    Default: 'None'

  InstallBloom:
    Description: Install Bloom
    Type: String
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'

  BloomLicenseKey:
    Description: License Key for Graph Data Science
    Type: String
    Default: 'None'

  Password:
    Description: Password for Neo4j
    Type: String
    MinLength: 6
    NoEcho: true

  SSHKeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    AllowedPattern: '.+'

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - r6i.large
      - r6i.xlarge
      - r6i.2xlarge
      - r6i.4xlarge
      - r6i.8xlarge
      - r6i.12xlarge
      - r6i.16xlarge
      - r6i.24xlarge
      - r6i.32xlarge

  DiskSize:
    Description: Size in GB of the EBS volume on each node
    Type: Number
    Default: 100

  ImageId:
    Description: AMI ID for each node
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Resources:
  # Single Instance
  Neo4jSingleInstance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile:
        Ref: Neo4jInstanceProfile
      ImageId: !Ref ImageId
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: SSHKeyName
      SecurityGroups:
      - Ref: Neo4jExternalSecurityGroup
      - Ref: Neo4jInternalSecurityGroup
      EbsOptimized: true
      BlockDeviceMappings:
      - DeviceName: /dev/xvda
        Ebs:
          VolumeSize:
            Ref: DiskSize
          VolumeType: gp3
          Encrypted: true
      Tags:
        - Key: StackID
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Ref 'AWS::StackName'
      UserData:
        Fn::Base64:
          !Join
          - ''
          - - "#!/bin/bash\n"
            - "echo Running startup script...\n"

            - "graphDatabaseVersion="
            - Ref: GraphDatabaseVersion
            - "\n"

            - "installGraphDataScience="
            - Ref: InstallGraphDataScience
            - "\n"

            - "graphDataScienceLicenseKey="
            - Ref: GraphDataScienceLicenseKey
            - "\n"

            - "installBloom="
            - Ref: InstallBloom
            - "\n"

            - "bloomLicenseKey="
            - Ref: BloomLicenseKey
            - "\n"

            - "password="
            - Ref: Password
            - "\n"

            - "echo Adding neo4j yum repo...\n"
            - "rpm --import https://debian.neo4j.com/neotechnology.gpg.key\n"
            - "echo \""
            - "[neo4j]\n"
            - "name=Neo4j Yum Repo\n"
            - "baseurl=http://yum.neo4j.com/stable\n"
            - "enabled=1\n"
            - "gpgcheck=1\" > /etc/yum.repos.d/neo4j.repo\n"

            - "echo Installing Graph Database...\n"
            - "export NEO4J_ACCEPT_LICENSE_AGREEMENT=yes\n"
            - "yum -y install neo4j-enterprise-${graphDatabaseVersion}\n"

            - "echo Installing APOC...\n"
            - "mv /var/lib/neo4j/labs/apoc-*-core.jar /var/lib/neo4j/plugins\n"

            - "echo Configuring extensions and security in neo4j.conf...\n"
            - "sed -i s~#dbms.unmanaged_extension_classes=org.neo4j.examples.server.unmanaged=/examples/unmanaged~dbms.unmanaged_extension_classes=com.neo4j.bloom.server=/bloom,semantics.extension=/rdf~g /etc/neo4j/neo4j.conf\n"
            - "sed -i s/#dbms.security.procedures.unrestricted=my.extensions.example,my.procedures.*/dbms.security.procedures.unrestricted=gds.*,apoc.*,bloom.*/g /etc/neo4j/neo4j.conf\n"
            - "sed -i '$a dbms.security.http_auth_allowlist=/,/browser.*,/bloom.*' /etc/neo4j/neo4j.conf\n"
            - "sed -i '$a dbms.security.procedures.allowlist=apoc.*,gds.*,bloom.*' /etc/neo4j/neo4j.conf\n"

            - "echo Configuring network in neo4j.conf...\n"
            - "sed -i 's/#dbms.default_listen_address=0.0.0.0/dbms.default_listen_address=0.0.0.0/g' /etc/neo4j/neo4j.conf\n"
            - "publicHostname=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)\n"
            - "sed -i s/#dbms.default_advertised_address=localhost/dbms.default_advertised_address=${publicHostname}/g /etc/neo4j/neo4j.conf\n"

            - "echo Turning on SSL...\n"
            - "sed -i 's/dbms.connector.https.enabled=false/dbms.connector.https.enabled=true/g' /etc/neo4j/neo4j.conf\n"

            - "/etc/pki/tls/certs/make-dummy-cert cert\n"
            - "awk '/-----BEGIN PRIVATE KEY-----/,/-----END PRIVATE KEY-----/' cert > private.key\n"
            - "awk '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/' cert > public.crt\n"

            - "#for service in bolt https cluster backup; do\n"
            - "for service in https; do\n"
            - "  sed -i \"s/#dbms.ssl.policy.${service}/dbms.ssl.policy.${service}/g\" /etc/neo4j/neo4j.conf\n"
            - "  mkdir -p /var/lib/neo4j/certificates/${service}/trusted\n"
            - "  mkdir -p /var/lib/neo4j/certificates/${service}/revoked\n"
            - "  cp private.key /var/lib/neo4j/certificates/${service}\n"
            - "  cp public.crt /var/lib/neo4j/certificates/${service}\n"
            - "done\n"

            - "chown -R neo4j:neo4j /var/lib/neo4j/certificates\n"
            - "chmod -R 755 /var/lib/neo4j/certificates\n"

            - "if [[ $graphDataScienceLicenseKey != None ]]; then\n"
            - "  echo Writing GDS license key...\n"
            - "  mkdir -p /etc/neo4j/licenses\n"
            - "  echo $graphDataScienceLicenseKey > /etc/neo4j/licenses/neo4j-gds.license\n"
            - "  sed -i '$a gds.enterprise.license_file=/etc/neo4j/licenses/neo4j-gds.license' /etc/neo4j/neo4j.conf\n"
            - "fi\n"

            - "if [[ $installBloom == True ]]; then\n"
            - "  echo Installing Bloom...\n"
            - "  cp /var/lib/neo4j/products/bloom-plugin-*.jar /var/lib/neo4j/plugins\n"
            - "fi\n"

            - "if [[ $bloomLicenseKey != None ]]; then\n"
            - "  echo Writing Bloom license key...\n"
            - "  mkdir -p /etc/neo4j/licenses\n"
            - "  echo $bloomLicenseKey > /etc/neo4j/licenses/neo4j-bloom.license\n"
            - "  sed -i '$a neo4j.bloom.license_file=/etc/neo4j/licenses/neo4j-bloom.license' /etc/neo4j/neo4j.conf\n"
            - "fi\n"

            - "echo Starting Neo4j...\n"
            - "service neo4j start\n"
            - "neo4j-admin set-initial-password ${password}\n"
            - "sudo systemctl enable neo4j\n" # enable neo4j service to start on reboot

  # Allocate new Elastic IP address and associate it with the instance
  Neo4jIpAddress:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref Neo4jSingleInstance

  Neo4jInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: Neo4jRole

  Neo4jRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: Neo4jPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - autoscaling:DescribeAutoScalingInstances
            - cloudformation:DescribeStack*
            - ec2:DescribeInstances
            Resource: "*"

  Neo4jExternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable External Ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7473
        ToPort: 7473
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7474
        ToPort: 7474
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 7687
        ToPort: 7687
        CidrIp: 0.0.0.0/0

  Neo4jInternalSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable Neo4j Internal Ports
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 5000
        ToPort: 5000
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 6000
        ToPort: 6000
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 7000
        ToPort: 7000
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 7688
        ToPort: 7688
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 2003
        ToPort: 2003
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 2004
        ToPort: 2004
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 3637
        ToPort: 3637
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup
      - IpProtocol: tcp
        FromPort: 5005
        ToPort: 5005
        SourceSecurityGroupName: !Ref Neo4jExternalSecurityGroup

Outputs:
  Neo4jURL:
    Description: URL for Neo4j
    Value: 'You can login to Neo4j on port 7474 (http) or 7473 (https).'
  Neo4jUsername:
    Description: Username for Neo4j
    Value: 'The username is neo4j. The password is what you provided to the template.'
  SSH:
    Description: 'This is how you gain remote access to the machine.'
    Value:
      Fn::Join:
        - ''
        - - 'ssh -i ${HOME}/.ssh/'
          - !Ref SSHKeyName
          - '.pem -l ubuntu@'
          - !GetAtt Neo4jSingleInstance.PublicIp
